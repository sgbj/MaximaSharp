{"name":"MaximaSharp","tagline":"A simple library that uses Maxima to do symbolic math in C# using lambda functions and expressions.","body":"MaximaSharp\r\n===========\r\nMaximaSharp is a simple library that uses Maxima to perform symbolic algebra, plot functions, and do basic operations with C#'s lambda functions, expressions, and strings. Both examples and Maxima are included.\r\n\r\nWhat is Maxima?\r\n---------------\r\n> [Maxima](http://maxima.sourceforge.net/ \"Maxima\") is a system for the manipulation of symbolic and numerical expressions, including differentiation, integration, Taylor series, Laplace transforms, ordinary differential equations, systems of linear equations, polynomials, and sets, lists, vectors, matrices, and tensors. Maxima yields high precision numeric results by using exact fractions, arbitrary precision integers, and variable precision floating point numbers. Maxima can plot functions and data in two and three dimensions.\r\n\r\nUsing MaximaSharp\r\n-----------------\r\nGiven the following lambda expressions declared in C#:\r\n```csharp\r\nExpression<Func<double, double>> f = x => 3 * Math.Pow(x, 2) + 2 * x \r\n\t\t\t+ Math.Pow(Math.Cos(x), 2) + Math.Pow(Math.Sin(x), 2);\r\nExpression<Func<double, double>> g = x => 2 * x + 5 * 2;\r\nExpression<Func<double, double, double>> h = (y, z) => 3 * y + z;\r\n```\r\n\r\n### Simplifying ###\r\nSimplifying functions is easy:\r\n```csharp\r\nConsole.WriteLine(f.Simplify());\r\nConsole.WriteLine(g.Simplify());\r\nConsole.WriteLine(h.Simplify());\r\n// Output:\r\n// x => (((3 * (x ^ 2)) + (2 * x)) + 1)\r\n// x => (2 * (x + 5))\r\n// (y, z) => (z + (3 * y))\r\n```\r\n\r\n### Differentiating ###\r\nIt's also possible to take the derivative of functions:\r\n```csharp\r\nConsole.WriteLine(f.Differentiate());\r\nConsole.WriteLine(g.Differentiate());\r\nConsole.WriteLine(h.Differentiate(\"y\"));\r\n// Output:\r\n// x => ((6 * x) + 2)\r\n// x => 2\r\n// (y, z) => 3\r\n```\r\n\r\n### Integrating ###\r\nDefinite and indefinite integrals can also be found:\r\n```csharp\r\nConsole.WriteLine(f.Integrate().Simplify());\r\nConsole.WriteLine(f.Integrate(0, 2));\r\nConsole.WriteLine(g.Integrate());\r\nConsole.WriteLine(h.Integrate(\"y\"));\r\n// Output:\r\n// x => (x * (((x ^ 2) + x) + 1))\r\n// x => 14\r\n// x => ((x ^ 2) + (10 * x))\r\n// (y, z) => ((y * z) + ((3 * (y ^ 2)) / 2))\r\n```\r\n\r\n### Plotting ###\r\nPlot functions easily with gnuplot:\r\n```csharp\r\nMaxima.GnuPlot(@\"plot x+5*cos(x)\");\r\nMaxima.GnuPlot(@\"\r\n\tset parametric \r\n\tset pm3d depthorder hidden3d\r\n\tset isosamples 30, 20\r\n\tsplot [-pi:pi][-pi:pi] cos(u)*(cos(v)+3), sin(u)*(cos(v)+3), sin(v) w pm\r\n\");\r\nConsole.ReadLine();\r\n```\r\nProduces the following graphs:\r\n\r\n![Plot of x + 5 * cos(x)](http://farm3.staticflickr.com/2859/9458377507_b8deeb31a1_o.png)\r\n![Plot of cos(u)*(cos(v)+3), sin(u)*(cos(v)+3), sin(v)](http://farm6.staticflickr.com/5321/9461158962_42356e823a_o.png)\r\n\r\n### More stuff ###\r\nEvaluate functions:\r\n```csharp\r\nConsole.WriteLine(f.At(5));\r\nConsole.WriteLine(g.At(10));\r\n// Output:\r\n// 86\r\n// 30\r\n```\r\n\r\nPerform basic operations on functions:\r\n```csharp\r\nConsole.WriteLine(g.Plus(h));\r\nConsole.WriteLine(g.Minus(h));\r\nConsole.WriteLine(f.Times(g).Simplify());\r\nConsole.WriteLine(f.Over(g).Simplify());\r\n// Output:\r\n// (x, y, z) => (((2 * x) + 10) + ((3 * y) + z))\r\n// (x, y, z) => (((2 * x) + 10) - ((3 * y) + z))\r\n// x => ((2 * (x + 5)) * (((3 * (x ^ 2)) + (2 * x)) + 1))\r\n// x => ((((3 * (x ^ 2)) + (2 * x)) + 1) / (2 * (x + 5)))\r\n```\r\n<br/>\r\n***\r\n\r\n__Note:__ evaluating functions and basic operations are performed without the use of Maxima.\r\n\r\n***\r\n<br/>\r\nEvaluate strings with Maxima:\r\n```csharp\r\nConsole.WriteLine(Maxima.Eval(\"x + 2 + 2 * x + 3 * 5\"));\r\n// Output:\r\n// 3*x+17\r\n```\r\n\r\nConvert strings back into expressions:\r\n```csharp\r\nvar expr = Maxima.ToExpression(\"double, double\", \"x\", \"10 * x + 5 * cos(x)\");\r\nConsole.WriteLine(expr);\r\nConsole.WriteLine(expr.Differentiate().Simplify().At(0));\r\n// Output:\r\n// x => ((10 * x) + (5 * Cos(x)))\r\n// 10\r\n```\r\n<br/>\r\n***\r\n\r\n__Example:__ converting user input to an expression that can be differentiated, integrated, plotted, or evaluated.\r\n\r\n***\r\n<br/>\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}